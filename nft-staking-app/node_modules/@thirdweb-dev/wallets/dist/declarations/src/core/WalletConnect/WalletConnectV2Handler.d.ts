import { WCSession, WalletConnectHandler, WalletConnectReceiverConfig } from "../types/walletConnect";
import { AbstractWallet } from "../../evm/wallets/abstract";
export declare class WalletConnectV2Handler extends WalletConnectHandler {
    private _core;
    private _wcWallet;
    private _session;
    private _wcMetadata;
    private _activeProposal;
    private _activeRequestEvent;
    constructor(options: WalletConnectReceiverConfig, wallet: AbstractWallet);
    init(): Promise<void>;
    connectApp(wcUri: string): Promise<void>;
    approveSession(): Promise<void>;
    rejectSession(): Promise<void>;
    approveEIP155Request(): Promise<void>;
    rejectEIP155Request(): Promise<void>;
    getActiveSessions(): WCSession[];
    disconnectSession(): Promise<void>;
    private _setupWalletConnectEventsListeners;
    /**
     * Gets message from various signing request methods by filtering out
     * a value that is not an address (thus is a message).
     * If it is a hex string, it gets converted to utf8 string
     */
    private _getSignParamsMessage;
}
//# sourceMappingURL=WalletConnectV2Handler.d.ts.map