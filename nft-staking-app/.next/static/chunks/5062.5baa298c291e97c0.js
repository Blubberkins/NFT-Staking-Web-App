"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5062],{75062:function(t,r,a){a.d(r,{E:function(){return Erc20},a:function(){return Erc20SignatureMintable}});var e=a(61744),n=a(2593),i=a(92518),c=a(73699),s=a(47660),o=a(46024),p=a(7457),l=a(59602),h=a(38776),m=a(25894),d=a(44715),u=a(90737);async function normalizeAmount(t,r){let a=await t.read("decimals",[]);return e.parseUnits(c.cv.parse(r),a)}let Erc20Burnable=class Erc20Burnable{featureName=c.cC.name;constructor(t,r){this.erc20=t,this.contractWrapper=r}tokens=(0,p.d)(async t=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burn",args:[await this.erc20.normalizeAmount(t)]}));from=(0,p.d)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"burnFrom",args:await Promise.all([(0,c.aL)(t),this.erc20.normalizeAmount(r)])}))};let Erc20ClaimableWithConditions=class Erc20ClaimableWithConditions{featureName=c.cD.name;constructor(t,r,a){this.erc20=t,this.contractWrapper=r,this.storage=a;let e=new o.C(this.contractWrapper,c.bg,this.storage);this.conditions=new l.D(this.contractWrapper,e,this.storage)}to=(0,p.d)(async(t,r,a)=>{let e=await this.erc20.normalizeAmount(r);return await this.conditions.getClaimTransaction(t,e,a)})};let Erc20Droppable=class Erc20Droppable{constructor(t,r,a){this.erc20=t,this.contractWrapper=r,this.storage=a,this.claim=new Erc20ClaimableWithConditions(this.erc20,this.contractWrapper,this.storage)}};let Erc20BatchMintable=class Erc20BatchMintable{featureName=c.cE.name;constructor(t,r){this.erc20=t,this.contractWrapper=r}to=(0,p.d)(async t=>{let r=new i.C(this.contractWrapper),a=await Promise.all(t.map(t=>Promise.all([(0,c.aL)(t.toAddress),this.erc20.normalizeAmount(t.amount)]))),e=a.map(t=>{let[a,e]=t;return r.encode("mintTo",[a,e])});return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[e]})})};let Erc20Mintable=class Erc20Mintable{featureName=c.cF.name;constructor(t,r){this.erc20=t,this.contractWrapper=r,this.batch=this.detectErc20BatchMintable()}to=(0,p.d)(async(t,r)=>await this.getMintTransaction(t,r));async getMintTransaction(t,r){return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintTo",args:await Promise.all([(0,c.aL)(t),this.erc20.normalizeAmount(r)])})}detectErc20BatchMintable(){if((0,o.d)(this.contractWrapper,"ERC20BatchMintable"))return new Erc20BatchMintable(this.erc20,this.contractWrapper)}};let Erc20SignatureMintable=class Erc20SignatureMintable{featureName=c.cG.name;constructor(t,r){this.contractWrapper=t,this.roles=r}mint=(0,p.d)(async t=>{let r=t.payload,a=t.signature,[e,i]=await Promise.all([this.mapPayloadToContractStruct(r),this.contractWrapper.getCallOverrides()]);return await (0,d.s)(this.contractWrapper,n.O$.from(e.price),r.currencyAddress,i),p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"mintWithSignature",args:[e,a],overrides:i})});mintBatch=(0,p.d)(async t=>{let r=await Promise.all(t.map(t=>this.mapPayloadToContractStruct(t.payload))),a=t.map((t,a)=>{let e=r[a],i=t.signature,c=t.payload.price;if(n.O$.from(c).gt(0))throw Error("Can only batch free mints. For mints with a price, use regular mint()");return{message:e,signature:i}}),e=new i.C(this.contractWrapper),c=a.map(t=>e.encode("mintWithSignature",[t.message,t.signature]));return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[c]})});async verify(t){let r=t.payload,a=t.signature,e=await this.mapPayloadToContractStruct(r),n=await this.contractWrapper.read("verify",[e,a]);return n[0]}async generate(t){return(await this.generateBatch([t]))[0]}async generateBatch(t){await this.roles?.verify(["minter"],await this.contractWrapper.getSignerAddress());let[r,a,e]=await Promise.all([this.contractWrapper.getChainID(),this.contractWrapper.read("name",[]),Promise.all(t.map(t=>u.S.parseAsync(t)))]),n=this.contractWrapper.getSigner();(0,h.Z)(n,"No signer available");let i=await Promise.all(e.map(t=>u.n.parseAsync(t))),c=await Promise.all(i.map(t=>this.mapPayloadToContractStruct(t))),s=await Promise.all(c.map(t=>this.contractWrapper.signTypedData(n,{name:a,version:"1",chainId:r,verifyingContract:this.contractWrapper.address},{MintRequest:u.M},t)));return e.map((t,r)=>{let a=i[r],e=s[r];return{payload:a,signature:e.toString()}})}async mapPayloadToContractStruct(t){let[r,a]=await Promise.all([(0,m.n)(this.contractWrapper.getProvider(),t.price,t.currencyAddress),this.contractWrapper.read("decimals",[])]),n=e.parseUnits(t.quantity,a);return{to:t.to,primarySaleRecipient:t.primarySaleRecipient,quantity:n,price:r,currency:t.currencyAddress,validityEndTimestamp:t.mintEndTime,validityStartTimestamp:t.mintStartTime,uid:t.uid}}};let Erc20=class Erc20{featureName=c.cH.name;get chainId(){return this._chainId}constructor(t,r,a){this.contractWrapper=t,this.storage=r,this.mintable=this.detectErc20Mintable(),this.burnable=this.detectErc20Burnable(),this.droppable=this.detectErc20Droppable(),this.signatureMintable=this.detectErc20SignatureMintable(),this._chainId=a}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.address}async get(){return await (0,i.f)(this.contractWrapper.getProvider(),this.getAddress())}async balance(){return await this.balanceOf(await this.contractWrapper.getSignerAddress())}async balanceOf(t){return this.getValue(await this.contractWrapper.read("balanceOf",[await (0,c.aL)(t)]))}async totalSupply(){return await this.getValue(await this.contractWrapper.read("totalSupply",[]))}async allowance(t){let[r,a]=await Promise.all([this.contractWrapper.getSignerAddress(),(0,c.aL)(t)]);return await this.allowanceOf(r,a)}async allowanceOf(t,r){let a=await Promise.all([(0,c.aL)(t),(0,c.aL)(r)]);return await this.getValue(await this.contractWrapper.read("allowance",a))}transfer=(0,p.d)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transfer",args:await Promise.all([(0,c.aL)(t),this.normalizeAmount(r)])}));transferFrom=(0,p.d)(async(t,r,a)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"transferFrom",args:await Promise.all([(0,c.aL)(t),(0,c.aL)(r),this.normalizeAmount(a)])}));setAllowance=(0,p.d)(async(t,r)=>p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:await Promise.all([(0,c.aL)(t),this.normalizeAmount(r)])}));transferBatch=(0,p.d)(async t=>{let r=new i.C(this.contractWrapper),a=(await Promise.all(t.map(t=>Promise.all([this.normalizeAmount(t.amount),(0,c.aL)(t.toAddress)])))).map(t=>{let[a,e]=t;return r.encode("transfer",[e,a])});return p.T.fromContractWrapper({contractWrapper:this.contractWrapper,method:"multicall",args:[a]})});mint=(0,p.d)(async t=>this.mintTo.prepare(await this.contractWrapper.getSignerAddress(),t));mintTo=(0,p.d)(async(t,r)=>(0,s.a)(this.mintable,c.cF).to.prepare(t,r));async getMintTransaction(t,r){return(0,s.a)(this.mintable,c.cF).getMintTransaction(t,r)}mintBatchTo=(0,p.d)(async t=>(0,s.a)(this.mintable?.batch,c.cE).to.prepare(t));burn=(0,p.d)(async t=>(0,s.a)(this.burnable,c.cC).tokens.prepare(t));burnFrom=(0,p.d)(async(t,r)=>(0,s.a)(this.burnable,c.cC).from.prepare(t,r));claim=(0,p.d)(async(t,r)=>this.claimTo.prepare(await this.contractWrapper.getSignerAddress(),t,r));claimTo=(0,p.d)(async(t,r,a)=>(0,s.a)(this.droppable?.claim,c.cD).to.prepare(t,r,a));get claimConditions(){return(0,s.a)(this.droppable?.claim,c.cD).conditions}get signature(){return(0,s.a)(this.signatureMintable,c.cG)}async normalizeAmount(t){return normalizeAmount(this.contractWrapper,t)}async getValue(t){return await (0,i.a)(this.contractWrapper.getProvider(),this.getAddress(),n.O$.from(t))}detectErc20Mintable(){if((0,o.d)(this.contractWrapper,"ERC20"))return new Erc20Mintable(this,this.contractWrapper)}detectErc20Burnable(){if((0,o.d)(this.contractWrapper,"ERC20Burnable"))return new Erc20Burnable(this,this.contractWrapper)}detectErc20Droppable(){if((0,o.d)(this.contractWrapper,"ERC20ClaimConditionsV1")||(0,o.d)(this.contractWrapper,"ERC20ClaimConditionsV2")||(0,o.d)(this.contractWrapper,"ERC20ClaimPhasesV1")||(0,o.d)(this.contractWrapper,"ERC20ClaimPhasesV2"))return new Erc20Droppable(this,this.contractWrapper,this.storage)}detectErc20SignatureMintable(){if((0,o.d)(this.contractWrapper,"ERC20SignatureMintable"))return new Erc20SignatureMintable(this.contractWrapper)}}}}]);