"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5844],{83287:function(t,e,r){r.d(e,{W:function(){return WagmiConnector}});var n=r(22555),i=r(65007);let WagmiConnector=class WagmiConnector extends i.Z{constructor(t){let{chains:e=n.gL9,options:r}=t;super(),this.chains=e,this.options=r}getBlockExplorerUrls(t){let e=t.explorers?.map(t=>t.url)??[];return e.length>0?e:void 0}isChainUnsupported(t){return!this.chains.some(e=>e.chainId===t)}updateChains(t){this.chains=t}}},83815:function(t,e,r){r.d(e,{A:function(){return AddChainError},C:function(){return ChainNotConfiguredError},R:function(){return ResourceUnavailableError},S:function(){return SwitchChainError},U:function(){return UserRejectedRequestError},a:function(){return ConnectorNotFoundError}});var n=r(69552);let RpcError=class RpcError extends Error{constructor(t,e){let{cause:r,code:n,data:i}=e;if(!Number.isInteger(n))throw Error('"code" must be an integer.');if(!t||"string"!=typeof t)throw Error('"message" must be a nonempty string.');super(`${t}. Cause: ${JSON.stringify(r)}`),this.cause=r,this.code=n,this.data=i}};let ProviderRpcError=class ProviderRpcError extends RpcError{constructor(t,e){let{cause:r,code:n,data:i}=e;if(!(Number.isInteger(n)&&n>=1e3&&n<=4999))throw Error('"code" must be an integer such that: 1000 <= code <= 4999');super(t,{cause:r,code:n,data:i})}};let AddChainError=class AddChainError extends Error{constructor(){super(...arguments),(0,n._)(this,"name","AddChainError"),(0,n._)(this,"message","Error adding chain")}};let ChainNotConfiguredError=class ChainNotConfiguredError extends Error{constructor(t){let{chainId:e,connectorId:r}=t;super(`Chain "${e}" not configured for connector "${r}".`),(0,n._)(this,"name","ChainNotConfigured")}};let ConnectorNotFoundError=class ConnectorNotFoundError extends Error{constructor(){super(...arguments),(0,n._)(this,"name","ConnectorNotFoundError"),(0,n._)(this,"message","Connector not found")}};let ResourceUnavailableError=class ResourceUnavailableError extends RpcError{constructor(t){super("Resource unavailable",{cause:t,code:-32002}),(0,n._)(this,"name","ResourceUnavailable")}};let SwitchChainError=class SwitchChainError extends ProviderRpcError{constructor(t){super("Error switching chain",{cause:t,code:4902}),(0,n._)(this,"name","SwitchChainError")}};let UserRejectedRequestError=class UserRejectedRequestError extends ProviderRpcError{constructor(t){super("User rejected request",{cause:t,code:4001}),(0,n._)(this,"name","UserRejectedRequestError")}}},59014:function(t,e,r){r.d(e,{n:function(){return normalizeChainId}});function normalizeChainId(t){return"string"==typeof t?Number.parseInt(t,"0x"===t.trim().substring(0,2)?16:10):"bigint"==typeof t?Number(t):t}},81764:function(t,e,r){r.d(e,{g:function(){return getValidPublicRPCUrl},i:function(){return isTwUrl}});var n=r(22555);function isTwUrl(t){let e=new URL(t).hostname;return e.endsWith(".thirdweb.com")||e.endsWith(".thirdweb-dev.com")||"localhost"===e||"0.0.0.0"===e}function getValidPublicRPCUrl(t){return(0,n.OZ$)(t).map(t=>{try{let e=new URL(t);return e.hostname.endsWith(".thirdweb.com")&&(e.pathname="",e.search=""),e.toString()}catch(e){return t}})}},35844:function(t,e,r){r.d(e,{BloctoConnector:function(){return BloctoConnector}});var n=r(71958),i=r(16074),s=r(69552),o=r(83287),a=r(83815),c=r(40562),h=r(19485),u=r(241),d=r(16441),l=r(98286),w=r(81764),g=r(59014);r(65007);var p=new WeakMap,f=new WeakMap,m=new WeakMap,C=new WeakMap,E=new WeakSet,b=new WeakSet;let BloctoConnector=class BloctoConnector extends o.W{constructor(t){let{chains:e,options:r={}}=t;super({chains:e,options:r}),(0,n._)(this,b),(0,n._)(this,E),(0,s._)(this,"id",l.w.blocto),(0,s._)(this,"name","Blocto"),(0,s._)(this,"ready",!0),(0,i._)(this,p,{writable:!0,value:void 0}),(0,i._)(this,f,{writable:!0,value:void 0}),(0,i._)(this,m,{writable:!0,value:void 0}),(0,i._)(this,C,{writable:!0,value:void 0}),(0,i.a)(this,f,this.onAccountsChanged.bind(this)),(0,i.a)(this,m,this.onChainChanged.bind(this)),(0,i.a)(this,C,this.onDisconnect.bind(this))}async connect(t){try{let e=await this.getProvider(t);this.setupListeners(),this.emit("message",{type:"connecting"});let r=await e.request({method:"eth_requestAccounts"}),n=h.getAddress(r[0]),i=await this.getChainId(),s=this.isChainUnsupported(i);return{account:n,chain:{id:i,unsupported:s},provider:e}}catch(t){if((0,n.a)(this,b,_handleConnectReset2).call(this),(0,n.a)(this,E,_isUserRejectedRequestError2).call(this,t))throw new a.U(t);throw t}}async disconnect(){let t=await this.getProvider();await t.request({method:"wallet_disconnect"}),this.removeListeners(),(0,n.a)(this,b,_handleConnectReset2).call(this)}async getAccount(){let t=await this.getProvider(),e=await t.request({method:"eth_accounts"}),[r]=e||[];if(!r)throw Error("No accounts found");return r}async getChainId(){let t=await this.getProvider(),e=await t.request({method:"eth_chainId"});return(0,g.n)(e)}getProvider(){let{chainId:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};if(!(0,i.b)(this,p)){let e=t??this.options.chainId??this.chains[0]?.chainId??1,r=this.chains.find(t=>t.chainId===e)?.rpc[0];(0,i.a)(this,p,new c.Z({ethereum:{chainId:e,rpc:r},appId:this.options.appId})?.ethereum)}if(!(0,i.b)(this,p))throw new a.a;return Promise.resolve((0,i.b)(this,p))}async getSigner(){let{chainId:t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},[e,r]=await Promise.all([this.getProvider(),this.getAccount()]);return new u.Q(e,t).getSigner(r)}async isAuthorized(){return!!i.b(this,p)?._blocto?.sessionKey??!1}async switchChain(t){let e=await this.getProvider(),r=d.hexValue(t),i=this.chains.find(e=>e.chainId===t);if(!i)throw new a.S(Error("chain not found on connector."));let s=e._blocto.supportNetworkList[`${t}`];if(!s)throw new a.S(Error(`Blocto unsupported chain: ${r}`));try{return await e.request({method:"wallet_addEthereumChain",params:[{chainId:r,rpcUrls:(0,w.g)(i)}]}),await e.request({method:"wallet_switchEthereumChain",params:[{chainId:r}]}),i}catch(t){if((0,n.a)(this,E,_isUserRejectedRequestError2).call(this,t))throw new a.U(t);throw new a.S(t)}}onAccountsChanged(){}async onChainChanged(t){let e=(0,g.n)(t),r=this.isChainUnsupported(e),n=await this.getAccount();this.emit("change",{chain:{id:e,unsupported:r},account:n})}onDisconnect(){this.emit("disconnect")}async setupListeners(){let t=await this.getProvider();t.on("accountsChanged",(0,i.b)(this,f)),t.on("chainChanged",(0,i.b)(this,m)),t.on("disconnect",(0,i.b)(this,C))}async removeListeners(){let t=await this.getProvider();t.off("accountsChanged",(0,i.b)(this,f)),t.off("chainChanged",(0,i.b)(this,m)),t.off("disconnect",(0,i.b)(this,C))}};function _isUserRejectedRequestError2(t){return/(user rejected)/i.test(t.message)}function _handleConnectReset2(){(0,i.a)(this,p,void 0)}}}]);